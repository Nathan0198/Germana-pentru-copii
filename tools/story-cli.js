#!/usr/bin/env node

/**
 * MiniDeutsch Story CLI Tool
 * Command-line tool for managing story modules
 */

const fs = require('fs').promises;
const path = require('path');

// Template data for story creation
const getStoryTemplates = () => [
  {
    id: 'forest',
    name: 'PƒÉdurea Cuvintelor',
    title: 'üå≤ PƒÉdurea Cuvintelor',
    description: 'ContinuƒÉ √Æn pƒÉdurea magicƒÉ cu noi prieteni!',
    difficulty: 'beginner',
    color: '#228B22',
    dependencies: ['castle'],
    totalLessons: 25
  },
  {
    id: 'village',
    name: 'Satul Prietenilor',
    title: 'üèòÔ∏è Satul Prietenilor',
    description: 'ExploreazƒÉ satul »ôi √Ænt√¢lne»ôte noi prieteni!',
    difficulty: 'intermediate',
    color: '#FF6347',
    dependencies: ['forest'],
    totalLessons: 25
  }
];

// Generate story template
function generateStoryTemplate(config) {
  const {
    storyId,
    storyName,
    storyTitle,
    description,
    totalLessons = 25,
    difficulty = 'beginner',
    color = '#8B4513',
    dependencies = [],
    author = 'MiniDeutsch Team'
  } = config;

  const capitalize = (str) => {
    if (!str) return '';
    return str.charAt(0).toUpperCase() + str.slice(1);
  };

  const storyClassTemplate = `/**
 * ${storyTitle} Story Module
 * ${description}
 * 
 * Generated by MiniDeutsch Story CLI Tool
 * Author: ${author}
 */

import { BaseStory } from '../../services/story/BaseStory';

export class ${capitalize(storyId)}Story extends BaseStory {
  constructor() {
    super();
  }

  /**
   * Initialize story with data
   */
  async customInitialize() {
    const storyData = {
      metadata: {
        id: '${storyId}',
        name: '${storyName}',
        title: '${storyTitle}',
        subtitle: 'Lec»õiile 1-${totalLessons}',
        description: '${description}',
        version: '1.0.0',
        author: '${author}',
        difficulty: '${difficulty}',
        tags: ['german', 'learning', '${difficulty}'],
        dependencies: ${JSON.stringify(dependencies)},
        language: 'german',
        targetAge: { min: 4, max: 10 }
      },
      
      lessons: this.generateLessons(),
      characters: this.generateCharacters(),
      theme: this.generateTheme(),
      unlockRequirements: this.generateUnlockRequirements(),
      rewards: this.generateRewards()
    };

    await this.initializeWithData(storyData);
  }

  /**
   * Generate lessons for this story
   * @returns {Array} Array of lesson objects
   */
  generateLessons() {
    const lessons = [];
    const baseId = this.getLessonIdOffset();
    
    for (let i = 1; i <= ${totalLessons}; i++) {
      lessons.push({
        id: baseId + i,
        title: \`Lec»õia \${i}\`,
        subtitle: \`Subtitle pentru lec»õia \${i}\`,
        duration: 5,
        
        story: {
          narrator: 'main_character',
          scenes: [
            {
              character: 'main_character',
              german: \`German text for lesson \${i}\`,
              romanian: \`Textul rom√¢nesc pentru lec»õia \${i}\`,
              image: \`${storyId}_lesson_\${i}_scene_1\`
            }
          ]
        },

        vocabulary: [
          // Add vocabulary words here
        ],

        games: [
          {
            type: 'drag_drop',
            instructor: 'main_character',
            title: 'ConecteazƒÉ cuvintele',
            items: []
          }
        ],

        unlock_requirements: {
          lesson_completed: i > 1 ? (baseId + i - 1) : null
        }
      });
    }
    
    return lessons;
  }

  /**
   * Generate characters for this story
   */
  generateCharacters() {
    return [
      {
        id: 'main_character',
        name: 'Main Character',
        emoji: 'üêª',
        role: 'narrator',
        description: 'The main character of this story',
        voice_profile: 'warm_friendly'
      }
      // Add more characters here
    ];
  }

  /**
   * Generate theme configuration
   */
  generateTheme() {
    return {
      color: '${color}',
      backgroundColor: '#F5F5DC',
      textColor: '#333',
      accentColor: '#FFD700',
      images: {
        background: \`\${this.metadata.id}_background\`
      },
      sounds: {
        background_music: \`\${this.metadata.id}_bg_music\`
      }
    };
  }

  /**
   * Generate unlock requirements
   */
  generateUnlockRequirements() {
    const requirements = {};
    
    if (${dependencies.length > 0}) {
      requirements.requiredStories = ${JSON.stringify(dependencies)};
    }
    
    return requirements;
  }

  /**
   * Generate rewards for story completion
   */
  generateRewards() {
    return {
      points: 500,
      badges: [
        {
          id: \`\${this.metadata.id}_master\`,
          name: \`Maestrul \${this.metadata.title}\`,
          description: \`CompleteazƒÉ toate lec»õiile din \${this.metadata.title}\`,
          icon: 'üëë'
        }
      ]
    };
  }

  /**
   * Get lesson ID offset
   */
  getLessonIdOffset() {
    const storyOffsets = {
      'castle': 0,
      'forest': 25,
      'village': 50,
      'city': 75,
      'ocean': 100,
      'mountains': 125,
      'space': 150,
      'magic': 175
    };
    
    return storyOffsets['${storyId}'] || 0;
  }
}

export default ${capitalize(storyId)}Story;
`;

  const indexTemplate = `/**
 * ${storyTitle} Story Module Index
 */

import ${capitalize(storyId)}Story from './${capitalize(storyId)}Story';

export { ${capitalize(storyId)}Story };
export default ${capitalize(storyId)}Story;

export const STORY_METADATA = {
  id: '${storyId}',
  name: '${storyName}',
  title: '${storyTitle}',
  version: '1.0.0',
  author: '${author}',
  dependencies: ${JSON.stringify(dependencies)}
};
`;

  return {
    storyClass: storyClassTemplate,
    index: indexTemplate,
    config: {
      storyId,
      storyName,
      className: `${capitalize(storyId)}Story`,
      fileName: `${capitalize(storyId)}Story.js`
    }
  };
}

// CLI Commands
const commands = {
  async create(storyId) {
    try {
      console.log(`üé≠ Creating story: ${storyId}`);
      
      // Find template
      const templates = getStoryTemplates();
      const template = templates.find(t => t.id === storyId);
      
      if (!template) {
        console.error(`‚ùå Template not found for story: ${storyId}`);
        console.log('Available templates:', templates.map(t => t.id).join(', '));
        return;
      }

      // Generate story files
      const storyFiles = generateStoryTemplate(template);
      
      // Create directory
      const storyDir = path.join(process.cwd(), 'src', 'stories', storyId);
      await fs.mkdir(storyDir, { recursive: true });
      
      // Write story class file
      const storyFilePath = path.join(storyDir, storyFiles.config.fileName);
      await fs.writeFile(storyFilePath, storyFiles.storyClass);
      
      // Write index file
      const indexFilePath = path.join(storyDir, 'index.js');
      await fs.writeFile(indexFilePath, storyFiles.index);
      
      console.log(`‚úÖ Story created successfully at: ${storyDir}`);
      console.log(`üìù Next steps:`);
      console.log(`   1. Add content to ${storyFiles.config.fileName}`);
      console.log(`   2. Register the story in src/stories/index.js`);
      console.log(`   3. Add assets (images, audio) for the story`);
      
    } catch (error) {
      console.error(`‚ùå Error creating story:`, error.message);
    }
  },

  async list() {
    try {
      console.log('üìö Available story templates:');
      const templates = getStoryTemplates();
      
      for (const template of templates) {
        console.log(`\nüé≠ ${template.title}`);
        console.log(`   ID: ${template.id}`);
        console.log(`   Description: ${template.description}`);
        console.log(`   Difficulty: ${template.difficulty}`);
        console.log(`   Dependencies: ${template.dependencies.join(', ') || 'None'}`);
        console.log(`   Lessons: ${template.totalLessons}`);
      }
      
    } catch (error) {
      console.error(`‚ùå Error listing templates:`, error.message);
    }
  },

  async status() {
    try {
      console.log('üìä Story System Status:');
      
      // Check if stories directory exists
      const storiesDir = path.join(process.cwd(), 'src', 'stories');
      const storyDirs = await fs.readdir(storiesDir, { withFileTypes: true });
      const stories = storyDirs.filter(dir => dir.isDirectory() && dir.name !== 'node_modules');
      
      console.log(`\nüìÅ Found ${stories.length} story modules:`);
      
      for (const storyDir of stories) {
        const storyPath = path.join(storiesDir, storyDir.name);
        const files = await fs.readdir(storyPath);
        
        console.log(`\nüé≠ ${storyDir.name}/`);
        console.log(`   Files: ${files.join(', ')}`);
        
        // Check if index.js exists
        if (files.includes('index.js')) {
          console.log(`   ‚úÖ Properly structured`);
        } else {
          console.log(`   ‚ö†Ô∏è  Missing index.js`);
        }
      }
      
    } catch (error) {
      console.error(`‚ùå Error checking status:`, error.message);
    }
  },

  help() {
    console.log(`
üé≠ MiniDeutsch Story CLI Tool

Usage: node tools/story-cli.js <command> [options]

Commands:
  create <story-id>    Create a new story module
  list                 List available story templates
  status              Show current story system status
  help                Show this help message

Examples:
  node tools/story-cli.js create forest
  node tools/story-cli.js list
  node tools/story-cli.js status

Story Templates:
  forest    - PƒÉdurea Cuvintelor (Forest of Words)
  village   - Satul Prietenilor (Village of Friends)
  city      - Ora»ôul Mare (Big City)
  ocean     - Oceanul Cunoa»ôterii (Ocean of Knowledge)
  mountains - Mun»õii √én»õelepciunii (Mountains of Wisdom)
  space     - Spa»õiul Cosmic (Cosmic Space)
  magic     - TƒÉr√¢mul Magic (Magic Realm)
`);
  }
};

// Main CLI execution
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  const options = args.slice(1);

  if (!command || command === 'help') {
    commands.help();
    return;
  }

  if (!commands[command]) {
    console.error(`‚ùå Unknown command: ${command}`);
    console.log('Run "node tools/story-cli.js help" for available commands');
    return;
  }

  try {
    await commands[command](...options);
  } catch (error) {
    console.error(`‚ùå Command failed:`, error.message);
  }
}

// Run CLI
if (require.main === module) {
  main();
}

module.exports = { commands, generateStoryTemplate, getStoryTemplates };