/**
 * MiniDeutsch Story Template Generator
 * Generates template files for new story modules
 */

/**
 * Generate a new story module template
 * @param {Object} config - Story configuration
 * @returns {Object} Template files content
 */
export function generateStoryTemplate(config) {
  const {
    storyId,
    storyName,
    storyTitle,
    description,
    totalLessons = 25,
    difficulty = 'beginner',
    color = '#8B4513',
    dependencies = [],
    author = 'MiniDeutsch Team'
  } = config;

  const storyClassTemplate = `/**
 * ${storyTitle} Story Module
 * ${description}
 * 
 * Generated by MiniDeutsch Story Template Generator
 * Author: ${author}
 */

import { BaseStory } from '../../services/story/BaseStory';

export class ${capitalize(storyId)}Story extends BaseStory {
  constructor() {
    super();
  }

  /**
   * Initialize story with data
   */
  async customInitialize() {
    const storyData = {
      metadata: {
        id: '${storyId}',
        name: '${storyName}',
        title: '${storyTitle}',
        subtitle: 'Lec»õiile 1-${totalLessons}',
        description: '${description}',
        version: '1.0.0',
        author: '${author}',
        difficulty: '${difficulty}',
        tags: ['german', 'learning', '${difficulty}'],
        dependencies: ${JSON.stringify(dependencies)},
        language: 'german',
        targetAge: { min: 4, max: 10 }
      },
      
      lessons: this.generateLessons(),
      characters: this.generateCharacters(),
      theme: this.generateTheme(),
      unlockRequirements: this.generateUnlockRequirements(),
      rewards: this.generateRewards()
    };

    await this.initializeWithData(storyData);
  }

  /**
   * Generate lessons for this story
   * @returns {Array} Array of lesson objects
   */
  generateLessons() {
    const lessons = [];
    
    for (let i = 1; i <= ${totalLessons}; i++) {
      lessons.push({
        id: i + this.getLessonIdOffset(), // Offset based on previous stories
        title: \`Lec»õia \${i}\`,
        subtitle: \`Subtitle pentru lec»õia \${i}\`,
        duration: 5, // minutes
        
        story: {
          narrator: 'main_character',
          scenes: [
            {
              character: 'main_character',
              german: \`German text for lesson \${i}\`,
              romanian: \`Textul rom√¢nesc pentru lec»õia \${i}\`,
              image: \`lesson_\${i}_scene_1\`
            }
            // Add more scenes here
          ]
        },

        vocabulary: [
          // Add vocabulary words here
          // { german: 'Hallo', romanian: 'Salut', category: 'salutƒÉri' }
        ],

        games: [
          {
            type: 'drag_drop',
            title: 'ConecteazƒÉ cuvintele',
            instructions: 'Trage cuvintele la imaginile potrivite',
            items: [
              // Add game items here
            ]
          }
        ],

        unlock_requirements: {
          lesson_completed: i > 1 ? (i - 1) + this.getLessonIdOffset() : null
        },

        audio_files: {
          story: \`\${this.metadata.id}_lesson_\${i}_story\`,
          vocabulary: \`\${this.metadata.id}_lesson_\${i}_vocabulary\`
        },

        rewards: {
          points: 50,
          stars: 3
        }
      });
    }
    
    return lessons;
  }

  /**
   * Generate characters for this story
   * @returns {Array} Array of character objects
   */
  generateCharacters() {
    return [
      {
        id: 'main_character',
        name: 'Main Character',
        emoji: 'üêª',
        role: 'narrator',
        description: 'The main character of this story',
        voice_profile: 'warm_friendly',
        personality: {
          friendly: true,
          helpful: true,
          patient: true
        }
      }
      // Add more characters here
    ];
  }

  /**
   * Generate theme configuration
   * @returns {Object} Theme object
   */
  generateTheme() {
    return {
      color: '${color}',
      backgroundColor: '#F5F5DC',
      textColor: '#333',
      accentColor: '#FFD700',
      images: {
        background: \`\${this.metadata.id}_background\`,
        characters: {
          main_character: \`\${this.metadata.id}_main_character\`
        }
      },
      sounds: {
        background_music: \`\${this.metadata.id}_bg_music\`,
        success: \`\${this.metadata.id}_success\`,
        error: \`\${this.metadata.id}_error\`
      }
    };
  }

  /**
   * Generate unlock requirements
   * @returns {Object} Unlock requirements object
   */
  generateUnlockRequirements() {
    const requirements = {};
    
    if (${dependencies.length > 0}) {
      requirements.requiredStories = ${JSON.stringify(dependencies)};
    }
    
    // Add other requirements as needed
    // requirements.minimumScore = 70;
    // requirements.requiredLessons = [1, 2, 3];
    // requirements.requiredBadges = ['some_badge_id'];
    
    return requirements;
  }

  /**
   * Generate rewards for story completion
   * @returns {Object} Rewards object
   */
  generateRewards() {
    return {
      points: 500,
      badges: [
        {
          id: \`\${this.metadata.id}_master\`,
          name: \`Maestrul \${this.metadata.title}\`,
          description: \`CompleteazƒÉ toate lec»õiile din \${this.metadata.title}\`,
          icon: 'üëë'
        }
      ],
      unlocks: [
        // Next story IDs that this story unlocks
      ],
      achievements: [
        \`\${this.metadata.id}_completed\`
      ]
    };
  }

  /**
   * Get lesson ID offset based on previous stories
   * This ensures lesson IDs don't conflict between stories
   * @returns {number} Offset value
   */
  getLessonIdOffset() {
    // Calculate based on story order and previous stories
    // This is a simplified version - you might want to make this more sophisticated
    const storyOffsets = {
      'castle': 0,
      'forest': 25,
      'village': 50,
      'city': 75,
      'ocean': 100,
      'mountains': 125,
      'space': 150,
      'magic': 175
    };
    
    return storyOffsets[this.metadata.id] || 0;
  }

  /**
   * Custom resource caching for this story
   */
  async cacheResources() {
    console.log(\`üì¶ Caching resources for \${this.metadata.name}...\`);
    
    // Cache images
    // await this.cacheImages();
    
    // Cache audio files
    // await this.cacheAudioFiles();
    
    // Cache animations
    // await this.cacheAnimations();
  }

  /**
   * Custom cleanup for this story
   */
  async customCleanup() {
    console.log(\`üßπ Custom cleanup for \${this.metadata.name}...\`);
    
    // Clean up specific resources
    // Clear caches, stop audio, etc.
  }
}

export default ${capitalize(storyId)}Story;
`;

  const indexTemplate = `/**
 * ${storyTitle} Story Module Index
 * Exports the story class and metadata
 */

import ${capitalize(storyId)}Story from './${capitalize(storyId)}Story';

export { ${capitalize(storyId)}Story };
export default ${capitalize(storyId)}Story;

// Story metadata for registration
export const STORY_METADATA = {
  id: '${storyId}',
  name: '${storyName}',
  title: '${storyTitle}',
  version: '1.0.0',
  author: '${author}',
  dependencies: ${JSON.stringify(dependencies)}
};
`;

  const readmeTemplate = `# ${storyTitle}

${description}

## Story Information

- **ID**: ${storyId}
- **Title**: ${storyTitle}
- **Difficulty**: ${difficulty}
- **Total Lessons**: ${totalLessons}
- **Dependencies**: ${dependencies.length > 0 ? dependencies.join(', ') : 'None'}

## Structure

### Characters
- Main Character - The primary narrator and guide

### Lessons
This story contains ${totalLessons} lessons covering:
- [List lesson topics here]

### Games
Each lesson includes interactive games:
- Drag & Drop exercises
- Memory games
- Speaking challenges
- Quick choice questions

## Development

### Adding Content

1. **Lessons**: Update the \`generateLessons()\` method to add new lesson content
2. **Characters**: Add new characters in the \`generateCharacters()\` method
3. **Vocabulary**: Add vocabulary words to each lesson
4. **Games**: Create interactive games for each lesson
5. **Audio**: Add audio file references for narration and pronunciation

### Assets Required

#### Images
- Background images
- Character illustrations
- Lesson scene images
- Game item images

#### Audio
- Story narration files
- Vocabulary pronunciation files
- Background music
- Sound effects

### Testing

Test your story module by:
1. Registering it with StoryManager
2. Loading it in the app
3. Playing through lessons
4. Checking progress tracking

## Integration

To integrate this story into the main app:

\`\`\`javascript
import StoryManager from '../services/story/StoryManager';
import ${capitalize(storyId)}Story from './stories/${storyId}';

// Register the story
StoryManager.registerStory('${storyId}', ${capitalize(storyId)}Story, {
  dependencies: ${JSON.stringify(dependencies)},
  autoLoad: false
});
\`\`\`
`;

  return {
    storyClass: storyClassTemplate,
    index: indexTemplate,
    readme: readmeTemplate,
    config: {
      storyId,
      storyName,
      className: `${capitalize(storyId)}Story`,
      fileName: `${capitalize(storyId)}Story.js`
    }
  };
}

/**
 * Capitalize first letter of string
 * @param {string} str - String to capitalize
 * @returns {string} Capitalized string
 */
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

/**
 * Generate story registration code
 * @param {Array} stories - Array of story configurations
 * @returns {string} Registration code
 */
export function generateStoryRegistration(stories) {
  const imports = stories.map(story => 
    `import ${capitalize(story.id)}Story from './stories/${story.id}';`
  ).join('\n');

  const registrations = stories.map(story => 
    `  StoryManager.registerStory('${story.id}', ${capitalize(story.id)}Story, {
    dependencies: ${JSON.stringify(story.dependencies || [])},
    autoLoad: false
  });`
  ).join('\n\n');

  const order = stories.map(story => `'${story.id}'`).join(', ');

  return `// Auto-generated story registration
import StoryManager from '../services/story/StoryManager';

${imports}

/**
 * Register all story modules
 */
export async function registerAllStories() {
  console.log('üìö Registering all stories...');

${registrations}

  // Set story order
  StoryManager.setStoryOrder([${order}]);

  console.log('‚úÖ All stories registered successfully');
}

export default registerAllStories;
`;
}

export default generateStoryTemplate;