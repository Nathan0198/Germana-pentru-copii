/**
 * Castelul Familiei Story Module
 * Prima poveste din MiniDeutsch - √éncepe aventura √Æn germanƒÉ alƒÉturi de Bj√∂rn »ôi familia lui!
 * 
 * Generated by MiniDeutsch Story Template Generator
 * Author: MiniDeutsch Team
 */

import { BaseStory } from '../../services/story/BaseStory';
import { CASTLE_LESSONS, CASTLE_ZONE_STATS } from '../../data/LessonsData';

export class CastleStory extends BaseStory {
  constructor() {
    super();
  }

  /**
   * Initialize story with data
   */
  async customInitialize() {
    const storyData = {
      metadata: {
        id: 'castle',
        name: 'Castelul Familiei',
        title: 'üè∞ Castelul Familiei',
        subtitle: 'Lec»õiile 1-25',
        description: '√éncepe aventura √Æn germanƒÉ alƒÉturi de Bj√∂rn »ôi familia lui!',
        version: '1.0.0',
        author: 'MiniDeutsch Team',
        difficulty: 'beginner',
        tags: ['german', 'learning', 'beginner', 'family'],
        dependencies: [], // First story, no dependencies
        language: 'german',
        targetAge: { min: 4, max: 10 }
      },
      
      lessons: this.importExistingLessons(),
      characters: this.generateCharacters(),
      theme: this.generateTheme(),
      unlockRequirements: this.generateUnlockRequirements(),
      rewards: this.generateRewards()
    };

    await this.initializeWithData(storyData);
  }

  /**
   * Import existing lessons from the legacy data structure
   * @returns {Array} Array of lesson objects
   */
  importExistingLessons() {
    // Import the existing CASTLE_LESSONS data
    return CASTLE_LESSONS.map(lesson => {
      return {
        ...lesson,
        storyId: 'castle',
        unlock_requirements: {
          lesson_completed: lesson.id > 1 ? lesson.id - 1 : null
        },
        audio_files: {
          story: `castle_lesson_${lesson.id}_story`,
          vocabulary: `castle_lesson_${lesson.id}_vocabulary`
        },
        rewards: {
          points: 50,
          stars: 3
        }
      };
    });
  }

  /**
   * Generate characters for this story
   * @returns {Array} Array of character objects
   */
  generateCharacters() {
    return [
      {
        id: 'bj√∂rn',
        name: 'Bj√∂rn der B√§r',
        emoji: 'üêª',
        role: 'narrator',
        description: 'Naratorul principal cu voce caldƒÉ »ôi paternalƒÉ',
        voice_profile: 'warm_paternal',
        personality: {
          friendly: true,
          helpful: true,
          patient: true,
          caring: true
        }
      },
      {
        id: 'emma',
        name: 'Emma die Ente',
        emoji: 'ü¶Ü',
        role: 'pronunciation',
        description: 'Specialista pronun»õie cu voce melodioasƒÉ »ôi prieteneascƒÉ',
        voice_profile: 'melodic_friendly',
        personality: {
          cheerful: true,
          encouraging: true,
          precise: true
        }
      },
      {
        id: 'max',
        name: 'Max der Hase',
        emoji: 'üê∞',
        role: 'games',
        description: 'Maestrul jocurilor cu voce energicƒÉ »ôi jucƒÉu»ôƒÉ',
        voice_profile: 'energetic_playful',
        personality: {
          energetic: true,
          playful: true,
          competitive: true
        }
      },
      {
        id: 'anna',
        name: 'Anna',
        emoji: 'üêª‚Äç‚ùÑÔ∏è',
        role: 'child',
        description: 'Fiica lui Bj√∂rn, prietenƒÉ »ôi ghid pentru copii',
        voice_profile: 'young_friendly',
        personality: {
          curious: true,
          brave: true,
          kind: true
        }
      },
      {
        id: 'papa_bear',
        name: 'Papa B√§r',
        emoji: 'üêª',
        role: 'father',
        description: 'TatƒÉl familiei, √Æn»õelept »ôi protector',
        voice_profile: 'deep_wise',
        personality: {
          wise: true,
          protective: true,
          strong: true
        }
      },
      {
        id: 'mama_bear',
        name: 'Mama B√§r',
        emoji: 'üêª',
        role: 'mother',
        description: 'Mama familiei, grijulie »ôi iubitoare',
        voice_profile: 'gentle_loving',
        personality: {
          nurturing: true,
          gentle: true,
          wise: true
        }
      }
    ];
  }

  /**
   * Generate theme configuration
   * @returns {Object} Theme object
   */
  generateTheme() {
    return {
      color: '#8B4513',
      backgroundColor: '#F5F5DC',
      textColor: '#333',
      accentColor: '#FFD700',
      images: {
        background: 'castle_background',
        characters: {
          bj√∂rn: 'bjorn_character',
          emma: 'emma_character',
          max: 'max_character',
          anna: 'anna_character',
          papa_bear: 'papa_bear_character',
          mama_bear: 'mama_bear_character'
        },
        scenes: {
          castle_exterior: 'castle_exterior',
          throne_room: 'castle_throne_room',
          kitchen: 'castle_kitchen',
          garden: 'castle_garden',
          library: 'castle_library'
        }
      },
      sounds: {
        background_music: 'castle_bg_music',
        success: 'castle_success',
        error: 'castle_error',
        ambient: 'castle_ambient'
      },
      animations: {
        castle_intro: 'castle_intro_animation',
        character_celebrations: 'castle_character_celebrations'
      }
    };
  }

  /**
   * Generate unlock requirements
   * @returns {Object} Unlock requirements object
   */
  generateUnlockRequirements() {
    // Castle is the first story, so it's always unlocked
    return {
      alwaysUnlocked: true
    };
  }

  /**
   * Generate rewards for story completion
   * @returns {Object} Rewards object
   */
  generateRewards() {
    return {
      points: 1250, // 25 lessons * 50 points each
      badges: [
        {
          id: 'friends_castle',
          name: 'Prietenii Castelului',
          description: 'CompleteazƒÉ primele 10 lec»õii din Castelul Familiei',
          icon: 'üë´',
          requirements: { lessons_completed: 10, zone: 'castle' },
          points: 100
        },
        {
          id: 'castle_explorer',
          name: 'Exploratorul Castelului',
          description: 'CompleteazƒÉ lec»õiile 11-20 din Castelul Familiei',
          icon: 'üóùÔ∏è',
          requirements: { lessons_completed: 20, zone: 'castle' },
          points: 150
        },
        {
          id: 'castle_master',
          name: 'Maestrul Castelului',
          description: 'CompleteazƒÉ toate cele 25 de lec»õii din Castelul Familiei',
          icon: 'üëë',
          requirements: { lessons_completed: 25, zone: 'castle', minimum_score: 80 },
          points: 250
        }
      ],
      unlocks: [
        'forest' // Unlocks the Forest story
      ],
      achievements: [
        'castle_completed',
        'first_story_master',
        'german_beginner'
      ]
    };
  }

  /**
   * Get lesson ID offset - Castle starts at 1
   * @returns {number} Offset value
   */
  getLessonIdOffset() {
    return 0; // Castle lessons start at ID 1
  }

  /**
   * Custom resource caching for Castle story
   */
  async cacheResources() {
    console.log(`üì¶ Caching resources for ${this.metadata.name}...`);
    
    try {
      // Cache character images
      await this.cacheCharacterImages();
      
      // Cache scene backgrounds
      await this.cacheSceneImages();
      
      // Cache audio files
      await this.cacheAudioFiles();
      
      // Cache animations
      await this.cacheAnimations();
      
      console.log(`‚úÖ Resources cached for ${this.metadata.name}`);
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error caching resources for ${this.metadata.name}:`, error);
    }
  }

  /**
   * Cache character images
   */
  async cacheCharacterImages() {
    const characters = ['bj√∂rn', 'emma', 'max', 'anna', 'papa_bear', 'mama_bear'];
    
    for (const character of characters) {
      try {
        const imageResource = await this.getResource(
          `character_${character}`,
          async () => {
            // In a real implementation, this would load the actual image
            console.log(`Loading character image: ${character}`);
            return { loaded: true, character };
          }
        );
        console.log(`üì∏ Cached character image: ${character}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to cache character image ${character}:`, error);
      }
    }
  }

  /**
   * Cache scene images
   */
  async cacheSceneImages() {
    const scenes = ['castle_exterior', 'throne_room', 'kitchen', 'garden', 'library'];
    
    for (const scene of scenes) {
      try {
        const imageResource = await this.getResource(
          `scene_${scene}`,
          async () => {
            console.log(`Loading scene image: ${scene}`);
            return { loaded: true, scene };
          }
        );
        console.log(`üñºÔ∏è Cached scene image: ${scene}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to cache scene image ${scene}:`, error);
      }
    }
  }

  /**
   * Cache audio files
   */
  async cacheAudioFiles() {
    // Cache story narration audio
    for (let i = 1; i <= 25; i++) {
      try {
        const audioResource = await this.getResource(
          `lesson_${i}_audio`,
          async () => {
            console.log(`Loading lesson ${i} audio`);
            return { loaded: true, lesson: i };
          }
        );
        console.log(`üîä Cached lesson ${i} audio`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to cache lesson ${i} audio:`, error);
      }
    }
    
    // Cache background music and sound effects
    const sounds = ['background_music', 'success', 'error', 'ambient'];
    for (const sound of sounds) {
      try {
        const soundResource = await this.getResource(
          `sound_${sound}`,
          async () => {
            console.log(`Loading sound: ${sound}`);
            return { loaded: true, sound };
          }
        );
        console.log(`üéµ Cached sound: ${sound}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to cache sound ${sound}:`, error);
      }
    }
  }

  /**
   * Cache animations
   */
  async cacheAnimations() {
    const animations = ['castle_intro', 'character_celebrations'];
    
    for (const animation of animations) {
      try {
        const animationResource = await this.getResource(
          `animation_${animation}`,
          async () => {
            console.log(`Loading animation: ${animation}`);
            return { loaded: true, animation };
          }
        );
        console.log(`‚ú® Cached animation: ${animation}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to cache animation ${animation}:`, error);
      }
    }
  }

  /**
   * Custom cleanup for Castle story
   */
  async customCleanup() {
    console.log(`üßπ Custom cleanup for ${this.metadata.name}...`);
    
    // Stop any playing audio
    // Clean up image caches
    // Clear animation resources
    // Reset character states
    
    console.log(`‚úÖ Custom cleanup completed for ${this.metadata.name}`);
  }

  /**
   * Get statistics specific to Castle story
   * @param {Object} userProgress - User's progress data
   * @returns {Object} Castle-specific statistics
   */
  getCastleStatistics(userProgress = {}) {
    const progress = this.calculateProgress(userProgress);
    const completedLessons = userProgress.completedLessons || [];
    
    // Castle-specific metrics
    const familyLessonsCompleted = completedLessons.filter(id => 
      id >= 1 && id <= 5 // First 5 lessons focus on family
    ).length;
    
    const greetingsLessonsCompleted = completedLessons.filter(id => 
      id >= 6 && id <= 10 // Lessons 6-10 focus on greetings
    ).length;
    
    const vocabularyMastered = this.calculateVocabularyMastery(userProgress);
    const charactersMetCount = this.getCharactersMetCount(userProgress);
    
    return {
      ...progress,
      familyLessonsCompleted,
      greetingsLessonsCompleted,
      vocabularyMastered,
      charactersMetCount,
      specialAchievements: this.getSpecialAchievements(userProgress)
    };
  }

  /**
   * Calculate vocabulary mastery for Castle story
   * @param {Object} userProgress - User's progress data
   * @returns {Object} Vocabulary statistics
   */
  calculateVocabularyMastery(userProgress = {}) {
    const castleLessons = this.lessons.slice(0, 25); // First 25 lessons
    const totalVocabulary = castleLessons.reduce((total, lesson) => {
      return total + (lesson.vocabulary ? lesson.vocabulary.length : 0);
    }, 0);
    
    const masteredVocabulary = userProgress.masteredVocabulary || [];
    const castleMastered = masteredVocabulary.filter(word => 
      castleLessons.some(lesson => 
        lesson.vocabulary && lesson.vocabulary.some(v => v.german === word)
      )
    ).length;
    
    return {
      total: totalVocabulary,
      mastered: castleMastered,
      percentage: totalVocabulary > 0 ? (castleMastered / totalVocabulary) * 100 : 0
    };
  }

  /**
   * Get count of characters met by user
   * @param {Object} userProgress - User's progress data
   * @returns {number} Number of characters met
   */
  getCharactersMetCount(userProgress = {}) {
    const metCharacters = userProgress.metCharacters || [];
    const castleCharacterIds = this.characters.map(c => c.id);
    
    return metCharacters.filter(id => castleCharacterIds.includes(id)).length;
  }

  /**
   * Get special achievements for Castle story
   * @param {Object} userProgress - User's progress data
   * @returns {Array} Array of special achievements
   */
  getSpecialAchievements(userProgress = {}) {
    const achievements = [];
    const completedLessons = userProgress.completedLessons || [];
    const lessonScores = userProgress.lessonScores || {};
    
    // Perfect first lesson
    if (lessonScores[1] === 100) {
      achievements.push({
        id: 'perfect_start',
        name: 'Start Perfect',
        description: 'Ob»õine scor perfect la prima lec»õie',
        earned: true
      });
    }
    
    // All castle lessons with 3 stars
    const castleLessons = this.lessons.slice(0, 25);
    const allThreeStars = castleLessons.every(lesson => 
      (lessonScores[lesson.id] || 0) >= 90
    );
    
    if (allThreeStars && completedLessons.length >= 25) {
      achievements.push({
        id: 'castle_perfectionist',
        name: 'Perfec»õionistul Castelului',
        description: 'Ob»õine 3 stele la toate lec»õiile din castel',
        earned: true
      });
    }
    
    return achievements;
  }
}

export default CastleStory;